package web

import (
	"encoding/json"
	"io/ioutil"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/pkg/errors"

	"github.com/smartcontractkit/chainlink/core/services"
	dkgpkg "github.com/smartcontractkit/chainlink/core/services/signatures/dkg"
	"github.com/smartcontractkit/chainlink/core/store/presenters"
)

type DKGController struct {
	App services.Application
}

type DKGRequest struct {
	Peers     []string
	Threshold int
}

func (dkg *DKGController) GenerateKey(c *gin.Context) {
	if !dkg.App.GetStore().Config.Dev() {
		jsonAPIError(c, http.StatusMethodNotAllowed, "this endpoint is for testing purposes only")
	}
	var request DKGRequest
	input, err := ioutil.ReadAll(c.Request.Body)
	if err != nil {
		jsonAPIError(c, http.StatusInternalServerError,
			errors.Wrapf(err, "while reading request"))
		return
	}
	err = json.Unmarshal(input, &request)
	if err != nil {
		jsonAPIError(c, http.StatusUnprocessableEntity,
			errors.Wrapf(err, "while parsing json %s", input))
		return
	}
	sharedKey, err := dkgpkg.GenerateSharedKey(request.Peers, request.Threshold)
	if err != nil {
		jsonAPIError(c, http.StatusInternalServerError,
			errors.Wrapf(err, "while attempting to generate shared key"))
		return
	}
	sharedKeyPresentation, err := presenters.NewSharedKey(*sharedKey)
	if err != nil {
		jsonAPIError(c, http.StatusInternalServerError,
			errors.Wrapf(err, "problem with key generated by dkg"))
	}
	jsonAPIResponse(c, sharedKeyPresentation, "shared key")
}
